on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *"
permissions: {}
name: Build and cache NixOS configuration
jobs:
  build-and-cache:
    name: "Build server configurations and push to Attic"
    strategy:
      fail-fast: false
      matrix:
        include:
          # - target: matara
          #  runner: ubuntu-latest
          #  cache: x86_64-linux
          #  public-key: "x86_64-linux:/RNIT5KVJFYXIKw+3WScU7rOcB1p47Uq2OU00Efz3vo="
          - target: melody
            runner: ubuntu-24.04-arm
            cache: aarch64-linux
            public-key: "aarch64-linux:3nWuIyJ3L6hX3NAWlnS03rVHxfO0N+uCrK52fvBPCH8="
          - target: wailord
            runner: ubuntu-24.04-arm
            cache: aarch64-linux
            public-key: "aarch64-linux:3nWuIyJ3L6hX3NAWlnS03rVHxfO0N+uCrK52fvBPCH8="
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Create disk space
        if: "${{ matrix.runner == 'ubuntu-latest' }}"
        uses: wimpysworld/nothing-but-nix@6af122a9403f936ef689e44cc013ae3f3e2f1c3b # v6
        with:
          hatchet-protocol: rampage
          witness-carnage: true
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          persist-credentials: false
      - name: Setup Nix and Attic
        uses: ./.github/reusable-workflows/setup-nix-cache
        with:
          ts-oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          ts-oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          attic-cache: ${{ matrix.cache }}
          attic-public-key: ${{ matrix.public-key }}
          attic-endpoint: ${{ secrets.ATTIC_ENDPOINT }}
          attic-token: ${{ secrets.ATTIC_TOKEN }}
      - name: Update nixpkgs
        if: "${{ github.event_name == 'schedule' }}"
        shell: bash
        run: nix flake update nixpkgs
      - name: Build NixOS configuration
        shell: bash
        env:
          TARGET: ${{ matrix.target }}
        run: nix build --print-build-logs ".#nixosConfigurations.${TARGET}.config.system.build.toplevel"
      - name: Push to attic cache
        shell: bash
        run: |
          attic push --jobs 1 --filter '^((steam|appimage)-(run|fhs)(-run)?|(google-chrome|nvidia|android-studio|firefox-nightly-bin).*)$' "${CACHE}" ./result
        env:
          CACHE: ${{ matrix.cache }}
  update-services-chart:
    name: "Update the nix-topology chart"
    permissions:
      id-token: write
      pages: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs:
      - "build-and-cache"
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          persist-credentials: false
      - name: Setup Nix and Attic
        uses: ./.github/reusable-workflows/setup-nix-cache
        with:
          ts-oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          ts-oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          attic-cache: "x86_64-linux"
          attic-public-key: "x86_64-linux:7L1XuoniEc65yX3tVGjkNyNadfePhfMD+TxodWdZtgM="
          attic-endpoint: ${{ secrets.ATTIC_ENDPOINT }}
          attic-token: ${{ secrets.ATTIC_TOKEN }}
      - name: Setup Pages
        uses: actions/configure-pages@983d7736d9b0ae728b81ab479565c72886d7745b # v5
      - name: Build topology chart
        shell: bash
        run: ./x chart
      - name: Upload artifact
        uses: actions/upload-pages-artifact@7b1f4a764d45c48632c6b24a0339c27f5614fb0b # v4
        with:
          path: "./result"
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4
