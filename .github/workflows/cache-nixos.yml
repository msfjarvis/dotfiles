on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'
permissions:
  actions: write
name: Build and cache NixOS configuration
jobs:
  build-and-cache:
    strategy:
      fail-fast: false
      matrix:
        include:
          # - cache: aarch64-linux
          #   runner: buildjet-8vcpu-ubuntu-2204-arm
          #   target: wailord
          #   public-key: "aarch64-linux:czBXxHtNIDorynmG/2pRuFSENM+fnu0rgVkH+8I4niQ="
          - cache: x86_64-linux
            runner: ubuntu-latest
            target: ryzenbox
            public-key: "x86_64-linux:HLQszdZAPt0hy6dsMxsI7EDeghCzfSwB8VyBEnei/j0="
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Setup Nix and Attic
        uses: msfjarvis/dotfiles/.github/reusable-workflows/setup-nix-cache@main
        with:
          ts-oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          ts-oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          attic-cache: ${{ matrix.cache }}
          attic-public-key: ${{ matrix.public-key }}
          attic-endpoint: ${{ secrets.ATTIC_ENDPOINT }}
          attic-token: ${{ secrets.ATTIC_TOKEN }}
      - name: Create disk space
        if: "${{ matrix.runner == 'ubuntu-latest' }}"
        uses: jlumbroso/free-disk-space@main
      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@8351fb9f51c580c96c509987ebb99e38aed956ce # v5.2.1
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1073741824
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-primary-key: never
      - name: Update nixpkgs
        if: "${{ github.event_name == 'schedule' }}"
        shell: bash
        run: nix flake update nixpkgs
      - name: Build NixOS configuration
        shell: bash
        run: nix build --max-jobs 1 --print-build-logs .#nixosConfigurations.${{ matrix.target }}.config.system.build.toplevel
      - name: Push to attic cache
        shell: bash
        run: |
          attic push --jobs 1 --filter '^((steam|appimage)-(run|fhs)(-run)?|(nvidia|android-studio|firefox-nightly-bin).*)$' "${CACHE}" ./result
        env:
          CACHE: ${{ matrix.cache }}
      - name: Cleanup intermediate store paths
        shell: bash
        run: nix store gc --debug
