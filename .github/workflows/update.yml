on:
  repository_dispatch:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to check updates for'
        required: false
      version:
        description: 'Version to pin package to'
        required: false
name: Check for package updates
jobs:
  check-nix-update:
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            cache: x86_64-linux
            public-key: "x86_64-linux:HLQszdZAPt0hy6dsMxsI7EDeghCzfSwB8VyBEnei/j0="
            nixos-configuration: ryzenbox
            # - runner: buildjet-4vcpu-ubuntu-2204-arm
            #   cache: aarch64-linux
            #   public-key: "aarch64-linux:czBXxHtNIDorynmG/2pRuFSENM+fnu0rgVkH+8I4niQ="
            #   nixos-configuration: wailord
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          # We run Git commands at the end
          persist-credentials: true
      - name: Setup Nix and Attic
        uses: msfjarvis/dotfiles/.github/reusable-workflows/setup-nix-cache@main
        with:
          ts-oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          ts-oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          attic-cache: "${{ matrix.cache }}"
          attic-public-key: "${{ matrix.public-key }}"
          attic-endpoint: ${{ secrets.ATTIC_ENDPOINT }}
          attic-token: ${{ secrets.ATTIC_TOKEN }}
      - name: Set Git user and email
        shell: bash
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com
      - name: Check pre-update Git ref
        shell: bash
        run: |
          echo "OLD_REF=$(git rev-parse HEAD)" >> "$GITHUB_ENV"
      - name: Install nix-update
        shell: bash
        run: |
          nix profile install ".#nixosConfigurations.${HOST}.pkgs.nix-update"
        env:
          HOST: ${{ matrix.nixos-configuration }}
      - name: Check for updates
        shell: bash
        run: ./update.sh "${PACKAGE}" "${VERSION}"
        env:
          CACHE_CMD: "attic push ${{ matrix.cache }}"
          PACKAGE_NAME: ${{ github.event.inputs.package || github.event.client_payload.package_name }}
          VERSION: ${{ github.event.inputs.version }}
      - name: Check post-update Git ref
        shell: bash
        run: |
          echo "NEW_REF=$(git rev-parse HEAD)" >> "$GITHUB_ENV"
      - name: Push to main branch
        if: "env.OLD_REF != env.NEW_REF && matrix.runner == 'ubuntu-latest'"
        shell: bash
        run: |
          git pull --rebase origin main
          git push origin main
