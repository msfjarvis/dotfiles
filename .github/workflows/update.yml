on:
  repository_dispatch:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to check updates for'
        required: false
      version:
        description: 'Version to pin package to'
        required: false
name: Check for package updates
jobs:
  check-nix-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install Nix
        uses: cachix/install-nix-action@08dcb3a5e62fa31e2da3d490afc4176ef55ecd72 # v30
      - name: Add nixpkgs-unstable channel
        shell: bash
        run: |
          nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs
          nix-channel --update
      - name: Setup Tailscale
        uses: tailscale/github-action@4e4c49acaa9818630ce0bd7a564372c17e33fb4d # v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: "tag:github-actions"
      - name: Set up Attic
        shell: bash
        run: |
          mkdir -p ~/.config/nix
          echo "machine $ENDPOINT" >> ~/.config/nix/netrc
          echo "password $TOKEN" >> ~/.config/nix/netrc
          echo "netrc-file = $HOME/.config/nix/netrc" >> ~/.config/nix/nix.conf
          nix profile install \
            --option extra-substituters "https://$ENDPOINT/$CACHE" \
            --option extra-trusted-public-keys "$PUBLIC_KEY" \
            "github:msfjarvis/nixpkgs?rev=dcddeb9f100da0d198b2a459667f6e4a7824cbb4#attic-client"
          attic login --set-default ci "https://$ENDPOINT" "$TOKEN"
          attic use "$CACHE"
        env:
          CACHE: "x86_64-linux"
          ENDPOINT: ${{ secrets.ATTIC_ENDPOINT }}
          PUBLIC_KEY: "x86_64-linux:HLQszdZAPt0hy6dsMxsI7EDeghCzfSwB8VyBEnei/j0="
          TOKEN: ${{ secrets.ATTIC_TOKEN }}
      - name: Set Git user and email
        shell: bash
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com
      - name: Check pre-update Git ref
        shell: bash
        run: |
          echo "OLD_REF=$(git rev-parse HEAD)" >> "$GITHUB_ENV"
      - name: Check for updates of given package
        shell: bash
        if: "github.event.inputs.package != null || github.event.action == 'package-bump'"
        run: nix-shell -p nix-update git --run './update.sh ${{ github.event.inputs.package || github.event.client_payload.package_name }} ${{ github.event.inputs.version }}'
      - name: Check for updates
        shell: bash
        if: "github.event.inputs.package == null"
        run: nix-shell -p nix-update git --run ./update.sh
      - name: Check post-update Git ref
        shell: bash
        run: |
          echo "NEW_REF=$(git rev-parse HEAD)" >> "$GITHUB_ENV"
      - name: Push to main branch
        if: "env.OLD_REF != env.NEW_REF"
        shell: bash
        run: |
          git pull --rebase origin main
          git push origin main
