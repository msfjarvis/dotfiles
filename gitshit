#!/usr/bin/env bash

# Copyright (C) Harsh Shandilya <me@msfjarvis.dev>
# SPDX-License-Identifier: MIT

function dlgit() {
  local REPO BRANCH
  REPO="${1}"
  BRANCH="${2}"
  if [ -z "${BRANCH}" ]; then
    BRANCH="$(curl -s https://api.github.com/repos/"${REPO:?}" | jq .default_branch | sed 's/\"//g')"
  fi
  aria2c https://github.com/"${REPO:?}"/archive/"${BRANCH}".zip -o "$(echo "${REPO}" | cut -d '/' -f 2)".zip
}

function getpfp() {
  curl -sI https://github.com/"${1:?}".png | grep Location | awk '{print $2}' | clip
}

function get_latest_release() {
  curl --silent "https://api.github.com/repos/${1:?}/releases" | jq -r '.[0].tag_name'
}

function get_release_assets() {
  local REPOSITORY RELEASE_TAG RELEASE_ID TMP_FILE
  REPOSITORY="${1:?}"
  RELEASE_TAG="${2:-latest}"
  TMP_FILE="$(mktemp)"
  if [ "${RELEASE_TAG}" == "latest" ]; then
    RELEASE_ID=$(curl --silent "https://api.github.com/repos/${1:?}/releases/latest" | jq -r .id)
  else
    # Get all releases from the v3 API, get the id and tag_name fields (called name in the slice) for each item, and write it to a temporary file
    curl --silent "https://api.github.com/repos/${REPOSITORY}/releases" | jq '.[] | {id: .id, name: .tag_name}' >"${TMP_FILE}"
    # Stream across the data we sliced earlier, printing the id and name as space separated values, then cleanly filter the one we need using grep and awk
    RELEASE_ID=$(jq -r '"\(.id) \(.name)"' "${TMP_FILE}" | grep "${RELEASE_TAG}" | awk '{print $1}') # Get the ID of the latest release
  fi
  curl --silent "https://api.github.com/repos/${REPOSITORY}/releases/${RELEASE_ID}" | jq -r .assets[].browser_download_url # Get the download URL of the assets
  [ -f "${TMP_FILE}" ] && rm -f "${TMP_FILE}"
}

function gcp() {
  [ ! -d ".git/" ] && {
    reportError "Must be run in a work tree"
    return 1
  }

  local OG_COMMITISH="${1}"
  local PREFIX="g/"
  local REMOTE="${REMOTE:-origin}"
  local REPO_SLUG COMMITISH
  REPO_SLUG="$(git remote get-url "${REMOTE}" | cut -d ':' -f 2)/"

  if [ -z "${OG_COMMITISH}" ]; then
    OG_COMMITISH="HEAD"
  fi

  COMMITISH="$(git rev-parse --short "${OG_COMMITISH}" 2>/dev/null)"

  if [ -z "${COMMITISH}" ]; then
    reportWarning "Failed to find a commit for '${OG_COMMITISH}'"
    return 1
  fi

  if [[ ${REPO_SLUG} =~ android-password-store ]]; then
    PREFIX="aps/"
    REPO_SLUG=""
  fi

  REPO_SLUG="$(echo "${REPO_SLUG}" | cut -d '/' -f 2 | sed 's/\.git$//g')"
  [ -n "${REPO_SLUG}" ] && REPO_SLUG="${REPO_SLUG}/"

  echo "https://msfjarvis.dev/${PREFIX}${REPO_SLUG}${COMMITISH:0:12}" | clip
}

function gitsync() {
  fd -Htd \\.git$ -x echo '{//}' | while read -r dir; do
    echoText "$dir"
    hub -C "$dir" sync
  done
}

function gitprune() {
  fd -Htd \\.git$ -x echo '{//}' | while read -r dir; do
    echoText "Pruning $dir"
    git -C "$dir" gc --aggressive --keep-largest-pack --prune="$(date)"
  done
}
