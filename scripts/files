#!/usr/bin/env bash

# Copyright (C) Harsh Shandilya <me@msfjarvis.dev>
# SPDX-License-Identifier: MIT

function dl() {
  local URL FILE_NAME
  declare -a CONFIGURATION=("--split=16" "--max-connection-per-server=16" "--summary-interval=0" "--auto-file-renaming=false")
  URL="${1}"
  FILE_NAME="${2}"
  if [[ ${URL} =~ magnet ]] || [[ ${URL} =~ \.torrent ]]; then
    CONFIGURATION+=("--seed-time=1m")
  fi
  if [ -f "${URL}" ]; then
    aria2c "${CONFIGURATION[@]}" --input-file "${URL}"
  elif [ -z "${FILE_NAME}" ]; then
    aria2c "${CONFIGURATION[@]}" "${URL:?}"
  else
    aria2c "${CONFIGURATION[@]}" "${URL:?}" -o "${FILE_NAME}"
  fi
}

function batch_dl() {
  local INPUT_FILE PROTOCOL
  INPUT_FILE="${1}"
  if [ -z "${INPUT_FILE}" ]; then
    INPUT_FILE="/dev/stdin"
  elif [ ! -e "${INPUT_FILE}" ]; then
    reportWarning "'${INPUT_FILE}' doesn't exist"
    return 1
  else
    [ -f "batch-pre-process" ] && {
      ./batch-pre-process "${INPUT_FILE}"
    }
  fi
  while read -r line; do
    [ -z "$line" ] && continue
    LINK="$(echo "${line}" | cut -d '|' -f 1)"
    DEST="$(echo "${line}" | cut -d '|' -f 2)"
    if [[ ${LINK} =~ http ]]; then
      if [[ ${LINK} =~ drive.google.com ]]; then
        PROTOCOL=gdrive
      else
        PROTOCOL=ddl
      fi
    else
      PROTOCOL=gdrive
    fi
    case "${PROTOCOL}" in
    gdrive)
      gdrivedl "${LINK}" --skip
      ;;
    ddl)
      dl "${LINK}" "${DEST}"
      ;;
    esac
  done < <(cat "${INPUT_FILE}")
}

# Symlink $1 to $2
function link() {
  local SRC DEST ROOT PWD
  SRC="${1}"
  DEST="${2}"
  ROOT="${3}"
  PWD="$(pwd)"
  case "${SRC:?}" in
  /*) ;; # No action needed
  *) SRC="${PWD}"/"${SRC:?}" ;;
  esac
  if [ -z "${ROOT}" ]; then
    ln -sf "${SRC:?}" "${DEST:?}"
  else
    sudo ln -sf "${SRC:?}" "${DEST:?}"
  fi
}

# Upload the latest screenshot to imgur
function ils() {
  imgur "$(find /mnt/mediahell/screenshots/ -printf "%T@ %Tc %p\n" | sort | tail -n1 | awk '{print $NF}')"
}

# Download a file given the Google Drive URL
function gdrivedl() {
  local URL GDRIVE FILE_ID
  declare -a CONFIGURATION=()
  URL="${1}"
  shift
  GDRIVE="$(command -v gdrive)"
  if [ -z "${GDRIVE}" ]; then
    # shellcheck disable=SC2016
    reportWarning 'gdrive is not in $PATH'
    return 1
  fi
  if [[ ${URL:?} =~ folders ]]; then
    FILE_ID="$(echo "${URL}" | sed -r -e 's/https.*folders\/(.*)/\1/' -e 's/(.*)\?.*/\1/')"
    CONFIGURATION+=("--recursive")
  else
    FILE_ID="$(echo "${URL:?}" | sed -Er -e 's/https.*id=(.*)/\1/' -e 's/https.*\/d\/(.*)\/(view|edit)/\1/' -e 's/(.*)(&|\?).*/\1/')"
  fi
  for arg; do
    CONFIGURATION+=("$arg")
  done
  $GDRIVE download "${CONFIGURATION[@]}" "${FILE_ID:?}"
}

# Search for a file in Google Drive
function gs() {
  gdrive list -m 100 --name-width 0 -q "name contains '${1:?}'"
}

# Use ffmpeg to dump information about a media file in JSON format
function mediainfo() {
  local FILE
  FILE="${1}"
  [[ -z ${FILE} || ! -f ${FILE} ]] && return
  ffprobe -v quiet -print_format json -show_format -show_streams "${FILE}" | jq .
}

function fao() {
  local FILE
  FILE="$(fzf --query="$1" --select-1 --exit-0)"
  [[ -n ${FILE} ]] && ${EDITOR:-micro} "${FILE}"
}

# shellcheck disable=SC2016
function tab2space() {
  fd --type f -0 -x bash -c 'tmp=$(mktemp); expand -t 4 "$0" > $tmp && cat $tmp > "$0"; rm $tmp' {} \;
}

function d2u() {
  fd --type f -x dos2unix
}

function whitespace() {
  fd --type f -X perl -pi -e 's/ +$//'
}

function mkgif() {
  ffmpeg -i "${1:?}" -vf "fps=10,scale=320:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" -loop 0 "${1%.*}".gif
}

function encode() {
  local INPUT OUTPUT
  INPUT="${1}"
  OUTPUT="${2:-output.mp4}"
  ffmpeg -nostdin -i "${INPUT:?}" -c:v libx265 -crf 26 -preset fast -c:a aac -b:a 128k "${OUTPUT?}"
  # ffmpeg -nostdin -i "${INPUT:?}" -c:v hevc_nvenc -preset p3 -c:a aac -b:a 128k "${OUTPUT:?}"
}

function encmasto() {
  local INPUT OUTPUT
  INPUT="${1}"
  OUTPUT="${2:-output.webm}"
  ffmpeg -hwaccel vaapi -hwaccel_output_format vaapi -vaapi_device /dev/dri/renderD128 \
    -i "${INPUT:?}" -vf scale_vaapi=1920:-1 -codec:v vp8_vaapi -b:v 2M "${OUTPUT}"
}

function tmpshare() {
  local FILE
  FILE="${1}"
  curl -F"file=@${FILE:?}" https://0x0.st
}

function reencode_dir() {
  function select_ext() {
    local INPUT_FILE
    INPUT_FILE="${1:?}"
    if [ -f "${INPUT_FILE}.mp4" ]; then
      echo "mp4"
    elif [ -f "${INPUT_FILE}.m4v" ]; then
      echo "m4v"
    else
      echo ""
    fi
  }
  local INPUT_FILE
  INPUT_FILE="${1}"
  if [ -z "${INPUT_FILE}" ]; then
    INPUT_FILE="/dev/stdin"
  elif [ ! -f "${INPUT_FILE}" ]; then
    reportWarning "'${INPUT_FILE}' doesn't exist"
    return 1
  fi
  while read -r f; do
    local ext src dst codec
    ext="$(select_ext "${f}")"
    src="${f}.${ext}"
    dst="${f}_x265.mp4"
    codec="$(ffprobe -v quiet -print_format json -show_format -show_streams "${src}" | jq -r .streams[0].codec_name)"

    if [[ ${codec} == "hevc" ]]; then continue; fi

    encode "${src}" "${dst}"
    du -sh "${src}" | tee -a ~/stats
    du -sh "${dst}" | tee -a ~/stats
    if [[ $(stat -c %s "${dst}") -ne 0 && $(stat -c %s "${dst}") -le $(stat -c %s "${src}") ]]; then
      touch -r "${src}" "${dst}"
      rm -v "${src}"
    else rm -v "${dst}"; fi
    sleep 5
  done < <(cat "${INPUT_FILE}")
}
