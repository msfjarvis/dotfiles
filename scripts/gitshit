#!/usr/bin/env bash

# Copyright (C) Harsh Shandilya <me@msfjarvis.dev>
# SPDX-License-Identifier: MIT

function pr_checkout() {
  # Get current repo info
  local repo
  repo=$(gh repo view --json nameWithOwner -q .nameWithOwner 2>/dev/null)
  if [[ -z $repo ]]; then
    echo "Error: Not in a GitHub repository or gh CLI not authenticated"
    return 1
  fi

  echo "Fetching open PRs for $repo..."

  # Get PRs with format: "#123 | PR Title | author | branch"
  local pr_list
  pr_list=$(gh pr list --state open --json number,title,headRefName,author --template '{{range .}}#{{.number}} | {{.title}} | {{.author.login}} | {{.headRefName}}{{"\n"}}{{end}}')

  if [[ -z $pr_list ]]; then
    echo "No open PRs found"
    return 0
  fi

  # Use fzf to select a PR
  local selected
  selected=$(echo "$pr_list" | fzf --height=20 --header="Select a PR to checkout:" --preview='echo {}' --preview-window=down:3:wrap)

  if [[ -z $selected ]]; then
    echo "No PR selected"
    return 0
  fi

  # Extract PR number and branch name
  local pr_number branch_name pr_title
  pr_number=$(echo "$selected" | cut -d'|' -f1 | sed 's/#//' | xargs)
  branch_name=$(echo "$selected" | cut -d'|' -f4 | xargs)
  pr_title=$(echo "$selected" | cut -d'|' -f2 | xargs)

  local base_branch
  base_branch=$(gh pr view "$pr_number" --json baseRefName -q .baseRefName)

  echo "Selected PR #$pr_number: $pr_title"
  echo "Branch: $branch_name"
  echo "Base branch: $base_branch"

  # Create worktree directory name (sanitize for filesystem)
  local worktree_name worktree_path
  worktree_name="pr-${pr_number}-${branch_name//[^a-zA-Z0-9-]/-}"
  worktree_path="../$worktree_name"

  # Check if worktree already exists
  if [[ -d $worktree_path ]]; then
    echo "Worktree already exists at $worktree_path"
    read -p "Do you want to switch to it? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      pushd "$worktree_path" || return 1
      echo "Switched to existing worktree: $worktree_path"
    fi
    return 0
  fi

  echo "Creating worktree at $worktree_path..."

  # Fetch the PR branch and create worktree
  if gh pr checkout "$pr_number" --detach 2>/dev/null; then
    # If gh pr checkout works, create worktree from the checked out state
    git worktree add "$worktree_path" HEAD
    git checkout - # Go back to original branch
  else
    # Fallback: fetch and create worktree manually
    git fetch origin "$branch_name:$branch_name" 2>/dev/null || git fetch origin "pull/$pr_number/head:$branch_name"
    git worktree add "$worktree_path" "$branch_name"
  fi

  git fetch origin "$base_branch"

  # shellcheck disable=SC2181 # I am too lazy
  if [[ $? -eq 0 ]]; then
    echo "Successfully created worktree for PR #$pr_number"
    echo "Switching to worktree..."
    pushd "$worktree_path" || return 1
    # Mixed reset to the merge base so that the diff matches GitHub even if the PR is behind base branch
    git reset --mixed "$(git merge-base "origin/$base_branch" "origin/$branch_name")"
    echo "Current directory: $(pwd)"
    echo "Current branch: $(git branch --show-current)"
  else
    echo "Failed to create worktree"
    return 1
  fi
}

function dlgit() {
  local REPO BRANCH
  REPO="${1}"
  BRANCH="${2}"
  if [ -z "${BRANCH}" ]; then
    BRANCH="$(curl -s https://api.github.com/repos/"${REPO:?}" | jq .default_branch | sed 's/\"//g')"
  fi
  aria2c https://github.com/"${REPO:?}"/archive/"${BRANCH}".zip -o "$(echo "${REPO}" | cut -d '/' -f 2)".zip
}

function getpfp() {
  curl -sI https://github.com/"${1:?}".png | grep Location | awk '{print $2}' | clip
}

function get_latest_release() {
  curl --silent "https://api.github.com/repos/${1:?}/releases" | jq -r '.[0].tag_name'
}

function get_release_assets() {
  local REPOSITORY RELEASE_TAG RELEASE_ID TMP_FILE
  REPOSITORY="${1:?}"
  RELEASE_TAG="${2:-latest}"
  TMP_FILE="$(mktemp)"
  if [ "${RELEASE_TAG}" == "latest" ]; then
    RELEASE_ID=$(curl --silent "https://api.github.com/repos/${1:?}/releases/latest" | jq -r .id)
  else
    # Get all releases from the v3 API, get the id and tag_name fields (called name in the slice) for each item, and write it to a temporary file
    curl --silent "https://api.github.com/repos/${REPOSITORY}/releases" | jq '.[] | {id: .id, name: .tag_name}' >"${TMP_FILE}"
    # Stream across the data we sliced earlier, printing the id and name as space separated values, then cleanly filter the one we need using grep and awk
    RELEASE_ID=$(jq -r '"\(.id) \(.name)"' "${TMP_FILE}" | grep "${RELEASE_TAG}" | awk '{print $1}') # Get the ID of the latest release
  fi
  curl --silent "https://api.github.com/repos/${REPOSITORY}/releases/${RELEASE_ID}" | jq -r .assets[].browser_download_url # Get the download URL of the assets
  [ -f "${TMP_FILE}" ] && rm -f "${TMP_FILE}"
}

function gcp() {
  [ ! -d ".git/" ] && {
    reportError "Must be run in a work tree"
    return 1
  }

  local OG_COMMITISH="${1}"
  local PREFIX="g/"
  local REMOTE="${REMOTE:-origin}"
  local REPO_SLUG COMMITISH
  REPO_SLUG="$(git remote get-url "${REMOTE}" | cut -d '/' -f 4-5)/"
  if [ "${REPO_SLUG}" == "/" ]; then
    REPO_SLUG="$(git remote get-url "${REMOTE}" | cut -d ':' -f 2)/"
  fi

  if [ -z "${OG_COMMITISH}" ]; then
    OG_COMMITISH="HEAD"
  fi

  COMMITISH="$(git rev-parse --short "${OG_COMMITISH}" 2>/dev/null)"

  if [ -z "${COMMITISH}" ]; then
    reportWarning "Failed to find a commit for '${OG_COMMITISH}'"
    return 1
  fi

  if [[ ${REPO_SLUG} =~ "android-password-store/Android-Password-Store" ]]; then
    PREFIX="aps/"
    REPO_SLUG=""
  elif [[ ${REPO_SLUG} =~ android-password-store ]]; then
    PREFIX="apsg/"
  fi

  REPO_SLUG="$(echo "${REPO_SLUG}" | cut -d '/' -f 2 | sed 's/\.git$//g')"
  [ -n "${REPO_SLUG}" ] && REPO_SLUG="${REPO_SLUG}/"

  echo "https://msfjarvis.dev/${PREFIX}${REPO_SLUG}${COMMITISH:0:12}" | clip
}

function gitsync() {
  local HARD_RESET_DIRS=("nixpkgs")
  local GREEN="\033[32m"
  local LIGHT_GREEN="\033[32;1m"
  local RED="\033[31m"
  local LIGHT_RED="\033[31;1m"
  local RESET_COLOR="\033[0m"

  function should_hard_reset() {
    local dir_base_name
    dir_base_name=$(basename "$PWD")
    for reset_dir in "${HARD_RESET_DIRS[@]}"; do
      if [[ $dir_base_name == "$reset_dir" ]]; then
        return 0
      fi
    done
    return 1
  }

  fd --no-ignore-vcs -Htd \\.git$ -x echo '{//}' | while read -r dir; do
    echoText "$dir"

    cd "$dir" || continue

    local REMOTE DEFAULT_BRANCH CURRENT_BRANCH BRANCHES
    REMOTE=$(git remote show | head -n 1)
    DEFAULT_BRANCH=$(git remote show "$REMOTE" | awk '/HEAD branch/ {print $NF}')
    CURRENT_BRANCH=$(git branch --show-current)

    git fetch --prune --quiet --progress "$REMOTE"

    BRANCHES=$(git for-each-ref --format '%(refname:short)' refs/heads/)

    for BRANCH in $BRANCHES; do
      local UPSTREAM
      local FULL_BRANCH="refs/heads/$BRANCH"
      local REMOTE_BRANCH="refs/remotes/$REMOTE/$BRANCH"
      local GONE=false

      UPSTREAM=$(git for-each-ref --format '%(upstream:short)' "refs/heads/$BRANCH")

      if [ -z "$UPSTREAM" ]; then
        if git show-ref --verify --quiet "$REMOTE_BRANCH"; then
          UPSTREAM=$REMOTE_BRANCH
        else
          GONE=true
        fi
      else
        REMOTE_BRANCH=$UPSTREAM
      fi

      if [ -n "$UPSTREAM" ]; then
        local LOCAL_SHA
        LOCAL_SHA=$(git rev-parse "$BRANCH")
        local REMOTE_SHA
        REMOTE_SHA=$(git rev-parse "$UPSTREAM")
        if [ "$LOCAL_SHA" != "$REMOTE_SHA" ]; then
          if should_hard_reset; then
            if [ "$BRANCH" == "$CURRENT_BRANCH" ]; then
              git reset --hard "$UPSTREAM"
            else
              git branch -f "$BRANCH" "$UPSTREAM"
            fi
            echo -e "${GREEN}Hard reset branch ${LIGHT_GREEN}$BRANCH${RESET_COLOR}"
          else
            if git merge-base --is-ancestor "$BRANCH" "$UPSTREAM"; then
              if [ "$BRANCH" == "$CURRENT_BRANCH" ]; then
                git merge --ff-only --quiet "$UPSTREAM"
              else
                git update-ref "$FULL_BRANCH" "$UPSTREAM"
              fi
              echo -e "${GREEN}Updated branch ${LIGHT_GREEN}$BRANCH${RESET_COLOR}"
            else
              echo -e "${RED}Warning: ${BRANCH} contains unpushed commits${RESET_COLOR}"
            fi
          fi
        fi
      elif [ "$GONE" = true ]; then
        if git merge-base --is-ancestor "$BRANCH" "refs/remotes/$REMOTE/$DEFAULT_BRANCH"; then
          if [ "$BRANCH" == "$CURRENT_BRANCH" ]; then
            git checkout --quiet "$DEFAULT_BRANCH"
            CURRENT_BRANCH=$DEFAULT_BRANCH
          fi
          git branch -D "$BRANCH"
          echo -e "${RED}Deleted branch ${LIGHT_RED}$BRANCH${RESET_COLOR}"
        else
          echo -e "${RED}Warning: ${BRANCH} was deleted on ${REMOTE}, but appears not merged into ${DEFAULT_BRANCH}${RESET_COLOR}"
        fi
      fi
    done

    cd - >/dev/null || continue
  done
}

function gitprune() {
  fd -Htd \\.git$ -x echo '{//}' | while read -r dir; do
    echoText "Pruning $dir"
    git -C "$dir" gc --aggressive --keep-largest-pack --prune="$(date)"
  done
}

function apsync() {
  gh poi
  gh repo sync
  [[ "$(git remote | wc -l)" -gt 1 ]] && gh repo sync "msfjarvis/$(basename "$(pwd)")"
  git ru
  git fetch --force --tags
}

function tempclone() {
  local SLUG TEMP_DIR
  SLUG="${1}"
  TEMP_DIR="$(mktemp -d)"
  gh repo clone "${SLUG:?}" "${TEMP_DIR}" && {
    pushd "${TEMP_DIR}" || exit 1
  }
}

function purge_gha() {
  local REPO_SLUG ACTION_NAME
  REPO_SLUG="${1}"
  ACTION_NAME="${2}"
  if [[ -z ${REPO_SLUG} ]]; then
    REPO_SLUG="$(git config --get remote.origin.url | cut -d '/' -f 4-5)"
    if [[ -z ${REPO_SLUG} ]]; then
      REPO_SLUG="$(git config --get remote.origin.url | cut -d ':' -f 2)"
    fi
    REPO_SLUG="${REPO_SLUG/.git/}"
  fi
  if [[ -z ${ACTION_NAME} && -d ".github/workflows/" ]]; then
    ACTION_NAME="$(fd . .github/workflows/ -x echo '{/}' | fzf --select-1)"
  fi
  gh api --paginate --header 'Accept: application/vnd.github+json' \
    /repos/"${REPO_SLUG:?}"/actions/workflows/"${ACTION_NAME:?}"/runs \
    -q '.workflow_runs[] | select(.conclusion == "failure" or .conclusion == "cancelled" or .conclusion == "startup_failure") | .id' | xargs \
    -I % gh api /repos/"${REPO_SLUG:?}"/actions/runs/% -X DELETE
}

function refresh_cachix_tokens() {
  local TOKEN
  TOKEN="${1}"
  readarray -t REPOS < <(gh repo list -l Rust --json name -q .[].name)
  REPOS+=("dotfiles")
  for repo in "${REPOS[@]}"; do
    if [[ "$(gh -R msfjarvis/"${repo}" secret list -a actions)" =~ CACHIX_AUTH_TOKEN ]]; then
      gh -R "msfjarvis/${repo}" secret set CACHIX_AUTH_TOKEN -a actions -b "${TOKEN:?}"
    fi
  done
}

function unr() {
  local LAST_TAG
  LAST_TAG="$(git tag --list --sort=-taggerdate | head -n1)"
  git diff "${LAST_TAG}"
}
