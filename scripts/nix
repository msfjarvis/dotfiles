#!/usr/bin/env bash

# Copyright (C) Harsh Shandilya <me@msfjarvis.dev>
# SPDX-License-Identifier: MIT

function nixpatch() {
  [ -z "${1}" ] && return
  local glibc_path
  glibc_path="$(nix eval --raw nixpkgs#glibc.outPath)"
  comma patchelf --set-interpreter "${glibc_path}/lib/ld-linux-x86-64.so.2" "${1}"
}

function nixdiff() {
  local CUR_GEN OLD_GEN
  case "$(uname)" in
  "Darwin")
    CUR_GEN="$(fd -j1 --max-depth 1 -tl system- /nix/var/nix/profiles/ | tail -n1)"
    OLD_GEN="$(fd -j1 --max-depth 1 -tl system- /nix/var/nix/profiles/ | tail -n2 | head -n1)"
    ;;
  "Linux")
    if [[ -n "$(command -v home-manager)" ]]; then
      CUR_GEN="$(fd -j1 --max-depth 1 -tl home-manager- ~/.local/state/nix/profiles/ | tail -n1)"
      OLD_GEN="$(fd -j1 --max-depth 1 -tl home-manager- ~/.local/state/nix/profiles/ | head -n1)"
    else
      GEN_COUNT="$(($(nixos-rebuild --no-reexec list-generations --json | jq length)))"
      if [[ $GEN_COUNT -ge 2 || -d ./result ]]; then
        CUR_GEN_NUM="$(nixos-rebuild --no-reexec list-generations --json | jq .[0].generation)"
        OLD_GEN_NUM="$(nixos-rebuild --no-reexec list-generations --json | jq .[1].generation)"
        CUR_GEN="/nix/var/nix/profiles/system-${CUR_GEN_NUM}-link"
        OLD_GEN="/nix/var/nix/profiles/system-${OLD_GEN_NUM}-link"
      else
        echoText "No generations to diff"
        return
      fi
    fi
    ;;
  esac
  if [ -d ./result ]; then
    OLD_GEN="${CUR_GEN}"
    CUR_GEN=./result
  fi
  nvd diff "${OLD_GEN}" "${CUR_GEN}"
}

function nixb() {
  nix flake update --commit-lock-file
}

function cache() {
  set -- "${1:-$(</dev/stdin)}" "${@:2}"
  declare -a CACHE_PATHS
  local ARCH KERNEL
  CACHE_PATHS=("$@")
  ARCH="$(uname -m)"
  KERNEL="$(uname --kernel-name | tr '[:upper:]' '[:lower:]')"
  attic push --filter '^((steam|appimage)-(run|fhs)(-run)?|(google-chrome|nvidia|android-studio|firefox-nightly-bin).*)$' "${ARCH}-${KERNEL}" "${CACHE_PATHS[@]:?}"
}

function flakerev() {
  local INPUT
  INPUT="${1:-nixpkgs}"
  jq -r ".flakes[] | select(.from.id == \"${INPUT}\") | .to.rev" /etc/nix/registry.json
}

function modinit() {
  local MODULE_DESC MODULE_NAME MODULE_TYPE MODULE_PATH
  read -rp "Module type? (e.g. programs/services): " MODULE_TYPE
  read -rp "Name?: " MODULE_NAME
  read -rp "Desc?: " MODULE_DESC
  MODULE_PATH="modules/nixos/${MODULE_TYPE}/${MODULE_NAME}/"
  mkdir -p "${MODULE_PATH}"
  cat <<EOF >"${MODULE_PATH}/default.nix"
{
  config,
  lib,
  namespace,
  ...
}:
let
  cfg = config.${MODULE_TYPE}.\${namespace}.${MODULE_NAME};
  inherit (lib)
    mkEnableOption
    mkIf
    mkOption
    types
    ;
in
{
  options.${MODULE_TYPE}.\${namespace}.${MODULE_NAME} = {
    enable = mkEnableOption "${MODULE_DESC}";
    domain = mkOption {
      type = types.str;
      description = "Domain name to expose server on";
      default = null;
    };
  };
  config = mkIf cfg.enable { };
}
EOF
}
